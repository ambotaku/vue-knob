[{"id":"9b59d683.fcc8a8","type":"tab","label":"Ui_knobs_demo","disabled":false,"info":""},{"id":"e9368716.cf98a8","type":"uibuilder","z":"9b59d683.fcc8a8","name":"ui_knobs","topic":"","url":"ui_knobs","fwdInMessages":false,"allowScripts":false,"allowStyles":false,"copyIndex":true,"showfolder":false,"useSecurity":false,"sessionLength":432000,"tokenAutoExtend":false,"x":220,"y":160,"wires":[["8bd4e39e.aea79"],[]],"info":"Demo for vue-knobs"},{"id":"8bd4e39e.aea79","type":"debug","z":"9b59d683.fcc8a8","name":"Debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":410,"y":160,"wires":[]},{"id":"9dfcc623.dc2c08","type":"comment","z":"9b59d683.fcc8a8","name":"How to ...","info":" * replace files index.html,index.js and index.css from the comments as the ui_knobs node source files\n * open browser window for localhost:1880/ui_knobs\n * activate node-red debug pane\n * play with knobs in UI\n * watch the debug messages\n * read source code in index.html and index.js\n","x":220,"y":100,"wires":[]},{"id":"c69f8f0f.c66d4","type":"comment","z":"9b59d683.fcc8a8","name":"index.html","info":"<!doctype html>\n<!-- Note that adding an appcache really speeds things up after the first load\n    You need to amend the appcache file to meet your needs.\n    Don't forget to change the appcache file if you update ANY\n    of the files in it otherwise the old versions will ALWAYS be used.\n<html lang=\"en\" manifest=\"./uibuilder.appcache\">\n-->\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <title>Demo of vue-canvas-knob widgets in UI builder nodes</title>\n    <meta name=\"description\" content=\"vue-canvas-knob demonstration\">\n\n    <link rel=\"icon\" href=\"./images/node-blue.ico\">\n\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"../uibuilder/vendor/bootstrap/dist/css/bootstrap.min.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"../uibuilder/vendor/bootstrap-vue/dist/bootstrap-vue.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"./index.css\" media=\"all\">\n\n</head>\n<body>\n    <div v-cloak>\n        <b-container id=\"app_container\">\n            <b-img src=\"./images/node-blue-192x192.png\" rounded left v-bind=\"imgProps\" alt=\"Blue Node-RED\" class=\"mt-1 mr-2\"></b-img>\n            <h1>UIbuilder + Vue.js + vue-canvas-knob.js for Node-RED</h1>\n            <p>\n                This is a uibuilder example using <a href=\"https://vuejs.org/\">Vue.js</a> as a front-end library.\n                See the\n                <a\n                    href=\"https://github.com/TotallyInformation/node-red-contrib-uibuilder\">node-red-contrib-uibuilder</a>\n                README for details on how to use UIbuilder.\n            </p>\n        </b-container>\n    </div>\n<div id=\"app\">\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.12\">\n\n</script><script src=\"./vue-knob.js\"></script>\n\n    <!-- Dont forget to use minified versions of libraries for production, non-min versions for development only -->\n    <!-- These MUST be in the right order. Note no leading / -->\n\n    <!-- REQUIRED: Socket.IO is loaded only once for all instances. Without this, you don't get a websocket connection -->\n    <script src=\"../uibuilder/vendor/socket.io/socket.io.js\"></script>\n\n    <!-- --- Vendor Libraries - Load in the right order --- -->\n    <script src=\"../uibuilder/vendor/vue/dist/vue.js\"></script> <!-- dev version with component compiler -->\n    <!-- <script src=\"../uibuilder/vendor/vue/dist/vue.min.js\"></script>   prod version with component compiler -->\n    <!-- <script src=\"../uibuilder/vendor/vue/dist/vue.runtime.min.js\"></script>   prod version without component compiler -->\n    <script src=\"../uibuilder/vendor/bootstrap-vue/dist/bootstrap-vue.js\"></script>\n\n    <!-- REQUIRED: Sets up Socket listeners and the msg object -->\n    <script src=\"./uibuilderfe.js\"></script> <!-- dev version -->\n    <!-- <script src=\"./uibuilderfe.min.js\"></script>     //prod version -->\n\n    <script src=\"./vue-knob.js\"></script>\n    <!-- OPTIONAL: You probably want this. Put your custom code here -->\n    <script src=\"./index.js\"></script>\n\n</body>\n</html>\n","x":360,"y":100,"wires":[]},{"id":"52a05d28.f57c74","type":"comment","z":"9b59d683.fcc8a8","name":"index.js","info":"'use strict'\n\n/** @see https://github.com/TotallyInformation/node-red-contrib-uibuilder/wiki/Front-End-Library---available-properties-and-methods */\n\n// eslint-disable-next-line no-unused-vars\n  // compass directions\nconst directions = ['S','SW','W','NW','N','NE','E','SE'];\n\nnew Vue({\n    data: function() {\n        return {\n            knobSize: 250,\n            direction: 4,\n            r: 127,\n            g: 127,\n            b: 127\n        }\n    },\n    template: `\n    <div id=\"mixer\">\n      <h1>Color Mixer</h1>\n      <vue-knob :width=knobSize :height=knobSize color-bg=\"#444444\" :value-min=\"0\" :value-max=\"255\" :input-popup=\"true\"\n        color-fg=\"#ff0000\" label=\"red\" value=\"127\" @value-changed=\"colorChanged('r', $event)\"/>\n      <vue-knob :width=knobSize :height=knobSize color-bg=\"#444444\" :value-min=\"0\" :value-max=\"255\" :input-popup=\"true\"\n        color-fg=\"#00ff00\" label=\"green\" value=\"127\" @value-changed=\"colorChanged('g', $event)\"/>\n      <vue-knob :width=knobSize :height=knobSize color-bg=\"#444444\" :value-min=\"0\" :value-max=\"255\" :input-popup=\"true\"\n        color-fg=\"#0000ff\" label=\"blue\" value=\"127\" @value-changed=\"colorChanged('b', $event)\"/>\n\n      <vue-knob :width=knobSize :height=\"knobSize\" color-bg=\"#444444\" :value-min=\"0\" :value-max=\"8\"\n        :angle-start=\"-Math.PI\" :angle-end=\"Math.PI\" color-fg=\"#eeeeee\"\n        value=\"4\" :needle=\"true\" :string-to-value=\"directionToValue\" :value-to-string=\"valueToDirection\"\n        @value-changed=\"directionChanged($event)\">\n\n      </vue-knob>\n      <div id=\"resultPane\" :style=\"{backgroundColor: getBackgroundColor}\">\n      <p class=\"text\">CSS color code: {{getBackgroundColor}}</p>\n      <p class=\"text\">{{valueToDirection(direction)}}</p>\n      </div>\n\n    </div>\n    `,\n    computed: {\n        getBackgroundColor() {\n            return '#'+ this.to2hex(this.r) + this.to2hex(this.g) + this.to2hex(this.b);\n        }\n    },\n\n    created: function() {\n        // Example of retrieving data from uibuilder\n        this.feVersion = uibuilder.get('version');\n\n        /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\n         * e.g. uibuilder.start('/uib', '/uibuilder/vendor/socket.io') // change to use your paths/names\n         * @param {Object=|string=} namespace Optional. Object containing ref to vueApp, Object containing settings, or String IO Namespace override. changes self.ioNamespace from the default.\n         * @param {string=} ioPath Optional. changes self.ioPath from the default\n         * @param {Object=} vueApp Optional. Reference to the VueJS instance. Used for Vue extensions.\n         */\n        uibuilder.start(this); // Single param passing vue app to allow Vue extensions to be used.\n    },\n\n    methods: {\n        colorChanged(color, e)  {\n            this[color] = e;\n            var topic = 'uibuilder/knobs/color'\n            uibuilder.send( {\n                'topic': topic,\n                'payload': {\n                    'color': color,\n                    'value': e\n                }\n            });\n        },\n\n        directionChanged(e) {\n            this.direction = e;\n            var topic = 'uibuilder/knobs/direction'\n            uibuilder.send({\n                'topic': topic,\n                'payload': {\n                    'direction': directions[e]\n                }\n            });\n        },\n\n        to2hex(n) {\n            let s = n.toString(16);\n            if (s.length < 2) s= '0'+s;\n            return s;\n        },\n\n        // convert compass direction to internal number\n        directionToValue(direction) {\n            const idx = directions.findIndex(el => el === direction.toUpperCase());\n            return (idx === -1) ? 0 : idx;\n        },\n\n        // convert internal number to compass direction\n        valueToDirection(value) {\n            return directions[Math.trunc(value % 8)];\n        }\n    }\n}).$mount('#app');\n","x":490,"y":100,"wires":[]},{"id":"7b20bbf3.7b1294","type":"comment","z":"9b59d683.fcc8a8","name":"index.css","info":"/* Cloak elements on initial load to hide the possible display of {{ ... }}\n * Add to the app tag or to specific tags\n * To display \"loading...\", change to the following:\n *    [v-cloak] > * { display:none }\n *    [v-cloak]::before { content: \"loadingâ€¦\" }\n */\n[v-cloak] { display: none; }\n\n#mixer {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin-top: 60px;\n    background-color: black;\n}\n\n#resultPane {\n    left: 0;\n    right: 400px;\n    top: 0;\n    height: 200px;\n    padding: 10px;\n    border: 1px solid black;\n}\n\nh1 {\n    padding: 20px;\n    color: white;\n}\n\n.text {\n    padding: 10px;\n    font-size: 30px;\n    color: white;\n}\n","x":620,"y":100,"wires":[]},{"id":"5a3d4fbc.6f4","type":"comment","z":"9b59d683.fcc8a8","name":"about vue-canvas-knob","info":"\nSee complete documentation and code for vue-knob component at:\n\n[GitHub](https://github.com/ambotaku/vue-knob.git)\n\nUse vue-knob as single-file component:\n`npm install vue-canvas-knob`","x":240,"y":40,"wires":[]},{"id":"d000845e.3b97e8","type":"comment","z":"9b59d683.fcc8a8","name":"vue-knob.js","info":"/*\n* vue-knob\n*\n* Canvas-based Vue component\n*\n* Copyright 2021 Klaus Zerbe\n*\n* based on  pure knob https://github.com/andrepxx/pure-knob\n* Copyright 2018 - 2020 Andre PlÃ¶tze\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n// eslint-disable-next-line no-undef\nVue.component(\"vue-knob\", {\n  name: \"vue-knob\",\n  template: `\n  <div id=\"knob\" :width=\"width\" :height=\"height\"\n         :style=\"{display:'inline-block',position:'relative',textAlign:'center'}\">\n    <canvas ref=\"cv\" :width=\"width\" :height=\"height\"\n            @mousedown.prevent=\"mouseDownListener\" @mousemove.prevent=\"mouseMoveListener\"\n            @mouseup.prevent=\"mouseUpListener\" @mouseleave.prevent=\"mouseCancelListener\"\n            @wheel.prevent=\"scrollListener\" @dblclick.prevent=\"doubleClickListener\"\n            @touchStartListener=\"touchStartListener\" @touchMoveListener=\"touchMoveListener\"\n            @touchEndListener=\"touchEndListener\"  @touchCancelListener=\"touchCancelListener\">\n    </canvas>\n    <div id=\"inputDiv\" v-show=\"editable_\" :style=\"{left:0,right:0,top:0,bottom:0,position:'absolute'}\">\n      <input type=\"number\" ref=\"input\" id=\"input\"\n             :style=\"{fontSize: fontSizeString_+'px',color: color_ ,width: '150px', margin: 'auto', textAlign: 'center', padding: 0}\"\n             :min=\"valueMin\" :max=\"valueMax\" @blur=\"editable_=false\" @keyup=\"keyUpListener\">\n    </div>\n  </div>\n  `,\n  props: {\n    height: {\n      type: Number,\n      default: 300\n    },\n    width: {\n      type: Number,\n      default: 300\n    },\n    angleStart: {\n      type: Number,\n      default: -0.75 * Math.PI\n    },\n    angleEnd: {\n      type: Number,\n      default: 0.75 * Math.PI\n    },\n    angleOffset: {\n      type: Number,\n      default: -0.5 * Math.PI\n    },\n    colorBg: {\n      type: String,\n      default: '#181818'\n    },\n    colorFg: {\n      type: String,\n      default: '#ff8800'\n    },\n    colorLabel: {\n      type: String,\n      default: '#ffffff'\n    },\n    stringToValue: {\n      type: Function,\n      default: function (string) {\n        return parseInt(string);\n      }\n    },\n    valueToString: {\n      type: Function,\n      default: function (value) {\n        return value.toString();\n      }\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    needle: {\n      type: Boolean,\n      default: false\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    },\n    inputPopup: {\n      type: Boolean,\n      default: false\n    },\n    textScale: {\n      type: Number,\n      default: 1.0\n    },\n    trackWidth: {\n      type: Number,\n      default: 0.4\n    },\n    valueMin: {\n      type: Number,\n      default: 0\n    },\n    valueMax: {\n      type: Number,\n      default: 100\n    },\n    value: {\n      type: String,\n      default: \"0\"\n    }\n  },\n\n  data: function () {\n    return {\n      height_: this.height,\n      width_: this.width,\n      value_: this.value,\n      editable_: false,\n      fontSizeString_: null,\n      color_: this.colorFg\n    }\n  },\n\n  mounted() {\n    this._canvas = this.$refs.cv;\n    this._input = this.$refs.input;\n    this._ctx = this._canvas.getContext(\"2d\");\n\n    const smaller = this.width_ < this.height_ ? this.width_ : this.height_;\n    this._fontSize = 0.2 * smaller;\n\n    this._previousValue = 0;\n    this._mousebutton = false;\n    this._touchCount = 0;\n    this._timeoutDoubleTap = 0;\n    this.render();\n  },\n  methods: {\n    render() {\n      const actualStart = this.angleStart + this.angleOffset;\n      const actualEnd = this.angleEnd + this.angleOffset;\n      const label = this.label;\n      const value = this.value_;\n      const valueStr = this.valueToString(value);\n      const valMin = this.valueMin;\n      const valMax = this.valueMax;\n      const relValue = (value - valMin) / (valMax - valMin);\n      const relAngle = relValue * (this.angleEnd - this.angleStart);\n      const angleVal = actualStart + relAngle;\n      const colorTrack = this.colorBg;\n      const colorFilling = this.colorFg;\n      const colorLabel = this.colorLabel;\n      const textScale = this.textScale;\n      const trackWidth = this.trackWidth;\n      const height = this.height_;\n      const width = this.width_;\n      const smaller = width < height ? width : height;\n      const centerX = 0.5 * width;\n      const centerY = 0.5 * height;\n      const radius = 0.4 * smaller;\n      const labelY = centerY + radius;\n      const lineWidth = Math.round(trackWidth * radius);\n      const labelSize = Math.round(0.8 * lineWidth);\n      const labelSizeString = labelSize.toString()\n      const fontSize = this._fontSize * textScale;\n      this.fontSizeString_ = fontSize.toString();\n      const ctx = this._ctx;\n\n\n      // clear the canvas\n      ctx.clearRect(0, 0, width, height);\n\n\n      // draw the track\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, actualStart, actualEnd);\n      ctx.lineCap = 'butt';\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = colorTrack;\n      ctx.stroke();\n\n      // draw the filling\n      ctx.beginPath();\n\n      // check if we're in needle mode\n      if (this.needle) {\n        ctx.arc(centerX, centerY, radius, angleVal - 0.02, angleVal + 0.02);\n      } else {\n        ctx.arc(centerX, centerY, radius, actualStart, angleVal);\n      }\n\n      ctx.lineCap = 'butt';\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = colorFilling;\n      ctx.stroke();\n\n      // draw the number\n      ctx.font = this.fontSizeString_ + 'px sans-serif';\n      ctx.fillStyle = colorFilling;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(valueStr, centerX, centerY);\n\n      // draw the label\n      if (label !== null) {\n        ctx.font = labelSizeString + 'px sans-serif';\n        ctx.fillStyle = colorLabel;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(label, centerX, labelY);\n      }\n    },\n\n    // Sets the committed value of this knob.\n    setValue(value) {\n      this.setValueFloating(value);\n      this.commit();\n    },\n\n    // set temporary value during knob operation\n    setValueFloating(value) {\n      const valMin = this.valueMin;\n      const valMax = this.valueMax;\n\n      if (value < valMin) {\n        value = valMin;\n      } else if (value > valMax) {\n        value = valMax;\n      }\n\n      this.value_ = Math.round(value);\n      this.render();\n    },\n\n    // delay needed for input focussing\n    focusInput() {\n      window.setTimeout(() => this._input.focus(), 1);\n    },\n\n    calculateValue(relX, relY) {\n      const angleDiff = this.angleEnd - this.angleStart;\n      let angle = Math.atan2(relX, -relY) - this.angleStart;\n      const twoPi = 2.0 * Math.PI;\n\n      // make negative angles positive.\n      if (angle < 0) {\n        if (angleDiff >= twoPi) {\n          angle += twoPi;\n        } else {\n          angle = 0;\n        }\n      }\n\n      const valMin = this.valueMin;\n      const valMax = this.valueMax;\n      let value = ((angle / angleDiff) * (valMax - valMin)) + valMin;\n\n      // clamp values into valid interval.\n      if (value < valMin) {\n        value = valMin;\n      } else if (value > valMax) {\n        value = valMax;\n      }\n\n      return value;\n    },\n\n    // mouse position to value\n    mouseEventToValue(e) {\n      const canvas = e.target;\n      const width = canvas.scrollWidth;\n      const height = canvas.scrollHeight;\n      const x = e.offsetX;\n      const y = e.offsetY;\n      const centerX = 0.5 * width;\n      const centerY = 0.5 * height;\n      const relX = x - centerX;\n      const relY = y - centerY;\n      return this.calculateValue(relX, relY);\n    },\n\n    // handle mouse double click\n    doubleClickListener() {\n      const readonly = this.readOnly;\n\n      if (!readonly && this.inputPopup) {\n        this.editable_ = true;\n        this.render();\n        this.focusInput();\n      }\n    },\n\n    // start mouse tracking\n    mouseDownListener(e) {\n      const btn = e.buttons;\n\n      if (btn === 1) { // left button\n        if (!this.readOnly) { // gauge mode\n          const val = this.mouseEventToValue(e);\n          this.setValueFloating(val);\n        }\n        this._mousebutton = true;\n      }\n\n      if (btn === 4) {  // middle button\n        if (!this.readOnly && this.inputPopup) {\n          this.editable_ = true;\n          this._input.value = '';\n          this.render();\n          this.focusInput();\n        }\n      }\n    },\n\n    // mouse tracking\n    mouseMoveListener(e) {\n      if (this._mousebutton) {\n        if (!this.readOnly) {\n          const val = this.mouseEventToValue(e);\n          this.setValueFloating(val);\n        }\n      }\n    },\n\n    // end mouse tracking\n    mouseUpListener(e) {\n      if (this._mousebutton) {\n        if (!this.readOnly) {\n          const val = this.mouseEventToValue(e);\n          this.setValue(val);\n        }\n      }\n      this._mousebutton = false;\n    },\n\n    // cancel mouse tracking\n    mouseCancelListener() {\n      if (this._mousebutton) {\n        this.abort();\n        this._mousebutton = false;\n      }\n    },\n\n    // handle mouse wheel\n    scrollListener(e) {\n      if (!this.readOnly) {\n        const delta = e.deltaY;\n        const direction = delta > 0 ? 1 : (delta < 0 ? -1 : 0);\n        let val = this.value_;\n        val += direction;\n        this.setValueFloating(val);\n\n        window.clearTimeout(this._timeout);\n        this._timeout = window.setTimeout(() => this.commit(), 250);\n      }\n    },\n\n    // keyboard handler\n    keyUpListener(e) {\n      const key = e.key;\n      if ((key === 'Enter') || (key === 'Escape')) {\n        this.editable_ = false;\n        const input = e.target;\n\n        if (key === 'Enter') {\n          const val = this.stringToValue(input.value);\n          const valid = isFinite(val);\n\n          if (valid) {\n            this.setValue(val);\n          }\n        }\n\n        input.value = '';\n      }\n    },\n\n    // rollback changed value\n    abort() {\n      this.value_ = this._previousValue;\n      this.render();\n    },\n\n    // commit value change\n    commit() {\n      this._previousValue = this.value_;\n      this.render();\n      this.$emit('value-changed', this.value_);\n    },\n\n    // touch position to value\n    touchEventToValue(e) {\n      const canvas = e.target;\n      const rect = canvas.getBoundingClientRect();\n      const offsetX = rect.left;\n      const offsetY = rect.top;\n      const width = canvas.scrollWidth;\n      const height = canvas.scrollHeight;\n      const centerX = 0.5 * width;\n      const centerY = 0.5 * height;\n      const touches = e.targetTouches;\n      let touch = null;\n\n      // if there are touches, extract the first one.\n      if (touches.length > 0) {\n        touch = touches.item(0);\n      }\n\n      let x = 0.0;\n      let y = 0.0;\n\n      // If a touch was extracted, calculate coordinates relative to\n      // the element position.\n      if (touch !== null) {\n        const touchX = touch['pageX'];\n        x = touchX - offsetX;\n        const touchY = touch['pageY'];\n        y = touchY - offsetY;\n      }\n\n      const relX = x - centerX;\n      const relY = y - centerY;\n      return this.calculateValue(relX, relY);\n    },\n\n    // handle touch start\n    touchStartListener(e) {\n      // if knob is not read-only, process touch event.\n      if (!this.readOnly) {\n        const touches = e.targetTouches;\n        const numTouches = touches.length;\n        const singleTouch = (numTouches === 1);\n\n        // only process single touches, not multi-touch gestures\n        if (singleTouch) {\n          this._mousebutton = true;\n\n          // if this is the first touch, bind double tap interval interval.\n          if (this._touchCount === 0) {\n            let timeout = this._timeoutDoubleTap;\n            window.clearTimeout(timeout);\n            timeout = window.setTimeout(() => {\n              /*\n               * If control was tapped exactly\n               * twice, enable on-screen keyboard.\n               */\n              if (this._touchCount === 2) {\n                e.preventDefault();\n                if (!this.readOnly && this.inputPopup) {\n                  this.editable_ = true;\n                  this.render();\n                  this.focusInput();\n                }\n              }\n\n              this._touchCount = 0;\n            }, 500);\n            this._timeoutDoubleTap = timeout;\n          }\n\n          this._touchCount++;\n          const val = this.touchEventToValue(e);\n          this.setValueFloating(val);\n        }\n      }\n    },\n\n    touchMoveListener(e) {\n      if (this._mousebutton) {\n        if (!this.readOnly) {\n          const touches = e.targetTouches;\n          const numTouches = touches.length;\n          const singleTouch = (numTouches === 1);\n\n          // only process single touches, not multi-touch\n          if (singleTouch) {\n            e.preventDefault();\n            const val = this.touchEventToValue(e);\n            this.setValueFloating(val);\n          }\n        }\n      }\n    },\n\n    // this is called when a user lifts a finger off the element.\n    touchEndListener(e) {\n      if (this._mousebutton) {\n        if (!this.readOnly) {\n          const touches = e.targetTouches;\n          const numTouches = touches.length;\n          const noMoreTouches = (numTouches === 0);\n\n          if (noMoreTouches) {\n            e.preventDefault();\n            this._mousebutton = false;\n            this.commit();\n          }\n        }\n      }\n\n      this._mousebutton = false;\n    },\n\n    // cancel touch processing\n    touchCancelListener() {\n      if (this._mousebutton) {\n        this.abort();\n        this._touchCount = 0;\n        const timeout = this._timeoutDoubleTap;\n        window.clearTimeout(timeout);\n      }\n\n      this._mousebutton = false;\n    }\n  }\n});\n","x":770,"y":100,"wires":[]}]
